name: Rust CI (Windows x64)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Ensure Chocolatey is installed
      shell: pwsh
      run: |
        if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        }

    - name: Ensure 7zip is installed
      shell: pwsh
      run: |
        if (!(Test-Path "C:\Program Files\7-Zip\7z.exe")) {
          choco install 7zip -y
        }

    - name: Download and extract Npcap SDK if missing
      shell: pwsh
      run: |
        $libPath = "${{ github.workspace }}\\npcap-sdk\\Lib\\x64\\wpcap.lib"
        if (!(Test-Path $libPath)) {
          curl.exe -L -o npcap-sdk.zip https://npcap.com/dist/npcap-sdk-1.05.zip
          mkdir npcap-sdk
          & "C:\Program Files\7-Zip\7z.exe" x npcap-sdk.zip -onpcap-sdk
        }

    - name: Verify wpcap.lib presence
      shell: pwsh
      run: |
        $libPath = "${{ github.workspace }}\\npcap-sdk\\Lib\\x64\\wpcap.lib"
        if (!(Test-Path $libPath)) {
          Write-Error "64-bit wpcap.lib not found in SDK Lib directory"
        }

    - name: Set NPCAP env vars
      run: |
        echo "NPCAP_INCLUDE=${{ github.workspace }}\\npcap-sdk\\Include" >> $env:GITHUB_ENV
        echo "NPCAP_LIB=${{ github.workspace }}\\npcap-sdk\\Lib\\x64" >> $env:GITHUB_ENV

    - name: Build in release mode
      env:
        LIB: ${{ env.NPCAP_LIB }}
        INCLUDE: ${{ env.NPCAP_INCLUDE }}
        LIBPCAP_LIBDIR: ${{ env.NPCAP_LIB }}
      run: cargo build --release

    - name: Run tests
      env:
        LIB: ${{ env.NPCAP_LIB }}
        INCLUDE: ${{ env.NPCAP_INCLUDE }}
        LIBPCAP_LIBDIR: ${{ env.NPCAP_LIB }}
      run: cargo test
